<expression> ::= <comp> | <comp> + <comp>
<comp> ::= <subcomp>[\I | \O{number}]
<subcomp> ::= <group> | <letter>
<group> ::= (<letter>) | (<OR>)
<OR> ::= <char> + <char>
<count> ::= <letter> '{' <number>'}'
<letter> ::= <char> | <dot> | <star>
---------------------------------------------------------
<RE> ::= <simple-RE>
<simple-RE>	::=  concatenation> | <basic-RE>
<concatenation> ::= <basic-RE> <simple-RE>
<basic-RE>	::= <star> | <plus> | <count> | <elementary-RE>
<star>	::=	<elementary-RE> "*"
<count> ::= <elementary-Re>  "{" any number "}"
<elementary-RE>	::=	 <character> | <group> | <any>
<group>	::=	"(" <RE> ")"
<any>	::=	"."
<character>	::= any non metacharacter
---------------------------------------------------------
<RE> ::= <expr>
<expr> ::= <chain> | <chain> "|" <expr>  // Use '|' for OR operation between chains
<chain> ::= <unit> | <unit> <chain>  // A chain is a sequence of units
<unit> ::= <basic-element> | <operator> <basic-element>  // A unit is a basic element or an operator applied to a basic element
<basic-element> ::= <group> | <word>  // Basic elements include groups or words
<group> ::= "(" <expr> ")"  // Grouping allows nested expressions
<operator> ::= <repeat> | <or> | <count> | <case-insensitivity> | <capture>
<repeat> ::= "*"  // Repeat the previous element 0 or more times
<or> ::= "+"  // Use '+' for one or more occurrences of the previous element (consider using '|' if representing OR operation)
<count> ::= "{" <number> "}"  // Repeat the previous element a specific number of times
<case-insensitivity> ::= "\I"  // Marks the previous element as case-insensitive
<capture> ::= "\O{number}"  // Captures the previous element for future reference
<any_char> ::= "."  // Represents any character
<word> ::= <word-char> <word-char> | <word-char> <word>  // A word is at least two characters or any_char
<word-char> ::= <character> | <any_char>  // word-char can be any character or any_char
<character> ::= any non-metacharacter  // Represents a specific character

---------------------------------------------------------
<RE> ::= <expr>
<expr> ::= <basic-RE> | <operator>
<basic-RE> ::= <operator> [<expr>]
<element> ::= <basic-element> | <operator> <element>
<basic-element> ::=  <group> | <any_char> | <character>
<operator> ::= <repeat> | <or>| <count>| <case-insensitivity> | <capture>
<repeat> ::=  "*" // repeat the previous element 0 or more times
<or> ::= <basic-element> "+" <basic-element>
<count> ::= <basic-element> "{" <number> "}"
<case-insensitivity> ::= <basic-element> "\I"
<capture> ::= <basic-element> "\O{number}"
<group> ::= "(" <basic-RE> ")"
<any_char> ::= "."
<character> ::= any non metacharacter